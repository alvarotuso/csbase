use crate::engine::asl;

grammar;

pub Query: asl::Query = {
    "SELECT" <columns: Comma<Identifier>> "FROM" <table: Identifier> =>
        asl::Query::Select(asl::SelectQuery {table, columns, condition: Option::None}),
    "SELECT" <columns: Comma<Identifier>> "FROM" <table: Identifier> "WHERE" <condition: LogicExpression> =>
        asl::Query::Select(asl::SelectQuery {table, columns, condition: Option::Some(condition)}),
    "INSERT INTO" <table: Identifier> "("<columns: Comma<Identifier>>") VALUES ("<values: Comma<Value>>")" =>
        asl::Query::Insert(asl::InsertQuery {table, columns, values}),
    "CREATE TABLE" <table: Identifier> "("<columns: Comma<ColumnDefinition>>")" =>
        asl::Query::CreateTable(asl::CreateTableQuery {table, columns}),
    "DROP TABLE" <table: Identifier> =>
        asl::Query::DropTable(asl::DropTableQuery {table}),
};

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

ColumnDefinition: asl::Column = {
    <i: Identifier> <t: Type> => asl::Column {name: i, column_type: t},
}

Identifier: String = {
    <i: r"[A-Za-z][A-Za-z0-9_]*"> => String::from(i),
};

LogicExpression: Box<asl::LogicExpression> = {
    Expression Comparator Expression => Box::new(asl::LogicExpression::Comparison(<>)),
    LogicExpression LogicOperator LogicExpression => Box::new(asl::LogicExpression::LogicExpression(<>)),
}

Expression: Box<asl::Expression> = {
    Expression Operator Expression => Box::new(asl::Expression::Op(<>)),
    Identifier => Box::new(asl::Expression::Identifier(<>)),
    Value => Box::new(asl::Expression::Value(<>)),
}

Value: asl::Value = {
    <v: r"'[^']+'"> => asl::Value::Str(String::from(v)),
    <v: r"[0-9]+"> => asl::Value::Int(v.parse().unwrap()),
    <v: r"[0-9]+\.[0-9]+"> => asl::Value::Float(v.parse().unwrap()),
    "true" => asl::Value::Bool(true),
    "false" => asl::Value::Bool(false),
}

Type: asl::Type = {
    "STRING" => asl::Type::Str,
    "INT" => asl::Type::Int,
    "FLOAT" => asl::Type::Float,
    "BOOL" => asl::Type::Bool,
}

Operator: asl::Operator = {
    "+" => asl::Operator::Add,
    "-" => asl::Operator::Subtract,
    "*" => asl::Operator::Multiply,
    "/" => asl::Operator::Divide,
}

Comparator: asl::Comparator = {
    "=" => asl::Comparator::Eq,
    "!=" => asl::Comparator::Neq,
    ">" => asl::Comparator::Gt,
    ">=" => asl::Comparator::Gte,
    "<" => asl::Comparator::Lt,
    "<=" => asl::Comparator::Lte,
}

LogicOperator: asl::LogicOperator = {
    "AND" => asl::LogicOperator::And,
    "OR" => asl::LogicOperator::Or,
}